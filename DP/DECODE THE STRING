class Solution {
public:
    int numDecodings(string s) {
        vector<int> dp(s.size(), -1);
        return DecodeWaysDP(s, 0, dp);
    }
    int DecodeWaysDP(string& s, int i, vector<int>& dp){
        if(s[i] == '0') return 0; // if the char is '0' then there is no mapping to decode it
        if(i >= s.size() -1) return 1; // return 1 as we reached end of the string
        if(dp[i] != -1) return dp[i]; // return the solution if exists or calculate it below if not
        if((s[i] == '2' && s[i+1] <= '6') || s[i] == '1') { // if the first and second char are in between 1 to 26 then there are two posible ways to decode it
            dp[i] = DecodeWaysDP(s, i+1, dp) + DecodeWaysDP(s, i+2, dp);
			return dp[i];
        }
        dp[i] = DecodeWaysDP(s, i+1, dp); // otherwise there is only 1 way to decode the string
        return dp[i];
    }
    
    
  class Solution {
	public:
int CountWays(string str){
int n = str.length();

int count[n+1];
count[0] = 1;//for empty string 
count[1] = 1;//for length 1 string 

if(str[0]=='0')//As there is no mapping of 0 so we have to consoder that case 
return 0;
for (int i = 2; i <= n; i++)
{
count[i] = 0;
if (str[i-1] > '0')
count[i] = count[i-1];

if (str[i-2] == '1' ||
(str[i-2] == '2' && str[i-1] < '7') )
count[i] =(count[i]%1000000007+ count[i-2]%1000000007)%1000000007;
}
return count[n];

}
