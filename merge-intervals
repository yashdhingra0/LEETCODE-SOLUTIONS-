
Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, 
and return an array of the non-overlapping intervals that cover all the intervals in the input.

 

Example 1:

Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].

Example 2:

Input: intervals = [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considered overlapping.


class Solution {
    
    static bool sortcol( const vector<int>& v1,const vector<int>& v2 ) {
        return v1[0] < v2[0];
}

solution:
    
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        vector<vector<int>>v;
        sort(begin(intervals), end(intervals) ,sortcol);
        int n=intervals.size();
        int start=intervals[0][0];
        int end=intervals[0][1];
        for(int i=1;i<n;i++){
            int start1=intervals[i][0];
            int end1=intervals[i][1];
            if(start1>end){
                v.push_back({start,end});
                start=start1;
                end=end1;
            }
            else if(end1>=end){
                end=end1;
            }
         }
         v.push_back({start,end});
         return v;
    }
};







